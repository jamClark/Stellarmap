using System;
using System.Collections.Generic;
using System.Text;

// STELLARMASS
// 2/19/2009
// JAMES CLARK

namespace Stellarmap
	{
	#region FunctionContolConstants
	public enum FuncParamType
		{
		None,
		Raw,
		String,
		Number,
		ORList,
		Array,
		Mapping,
		Property,
		Properties,
		Inherit,
		MultiParamFunction,
		}

	public static class FuncParamTypesList
		{
		static public FuncParamType[] List = new FuncParamType[] {	FuncParamType.Array,
	                                                                FuncParamType.Mapping,
	                                                                FuncParamType.Number,
	                                                                FuncParamType.ORList,
	                                                                FuncParamType.Properties,
	                                                                FuncParamType.Property,
	                                                                FuncParamType.Raw,
	                                                                FuncParamType.String,
	                                                                FuncParamType.Inherit};
		}

	public enum EntryType
		{
		NA, //not available
		Mixed, //put quotes unless there is a leading $
		Strings, //always puts quotes around data
		NonStrings, //never puts quotes around data (which means $ is not needed either)
		}

    public static class EntryTypesList
		{
		static public EntryType[] List = new EntryType[] {	EntryType.NA,
	                                                        EntryType.Mixed,
	                                                        EntryType.Strings,
	                                                        EntryType.NonStrings,
	                                                        };
		}
	
	public enum ControlType
		{
		Unset,
		CheckBox,
		CheckList,
		ListBuilder,
		MapBuilder,
		ComboSelection,
		ComboListBuilder,
		ComboMapBuilder,
		DoubleComboMap,
		RightComboMapBuilder,
		NumberEntry,
		TextEntry,
		TextDump,
		MultiParam,
		}
	#endregion
	
	public class FunctionControlException : Exception
		{
		public FunctionControlException() : base() {}
		public FunctionControlException(string message) : base(message) {}
		public FunctionControlException(string message,Exception inner) : base(message,inner) {}
		}
	
	
		
	/// <summary>
	/// An interface for dynamiclly generated controls. These controls are used by a
	/// code generator and represent a function call with all of its parameters. Paramters
	/// are stored as simply strings but the controls may utilize various common controls
	/// with various datatypes (ints, strings, Lists, etc) so this interface must be
	/// iherited by those controls so that a common method of extracting the data in string
	/// format is available.
	/// </summary>
	public interface IFunctionControl
		{		
		/// <summary>
		/// Implementation will provide all data as a string that represents
		/// the typed parameters of a codefile's givene function.
		/// </summary>
		/// <returns>A string representing the text that appears in the codefile's function parameters.</returns>
		string PullEntry();		
		
		/// <summary>
		/// Implementation will allow a string that represents the typed parameters of a
		/// codefile's function to be reinterpreted back into the user control's native
		/// format (ints, strings, Lists, etc).
		/// </summary>
		/// <param name="entry">The codefile's text from the given function's parameters.</param>
		void PushEntry(string entry);
		
		/// <summary>
		/// Sets or returns the name of the function that is being generated by the control.
		/// </summary>
		string FunctionName
			{
			get;
			set;
			}
		
		void SubscribeToUpdate(EventHandler handler);
		
		void UnsubscribeToUpdate(EventHandler handler);
		
		ControlType FunctionControlType
			{
			get;
			}
		
		EntryType ValueType
			{
			get;
			set;
			}
		
		EntryType KeyType
			{
			get;
			set;
			}		
		
		FuncParamType ParameterType
			{
			get;
			set;
			}
		
		bool Enabled
			{
			get;
			set;
			}	
		
		Object Tag
			{
			get;
			set;
			}

		string LabelText
			{
			get;
			set;
			}
		
		string RequiredHeader
			{
			get;
			set;
			}
		}
	
	
	}
